# Requirement for CoE197-M-ML
# Removing Projective Distortion on Images
# Author: Jasper Airius O. Cuya [2019-02407]

import numpy as np
import cv2

# Source Image (Put photo into the folder of code to remove the need to put whole file path)
Image = cv2.imread('Perspective test.jpeg')
Image_copy = Image.copy()                                                     # Creates Copy of Image for the Markers

# Function to get Position of 4 Corners
def Position_Data (event, x, y, flags, params):
    if event == cv2.EVENT_LBUTTONDOWN:
        cv2.circle(Image_copy, (x, y), 4, (0, 0, 255), -1)                    # Creates Circle Markers for Point
        points.append([x, y])
        if len(points) < 4:
            cv2.imshow('Distorted Image', Image_copy)
        if len(points) == 4:
            cv2.destroyAllWindows()                                           # Closes Image Window after 4 points
points = []                                                                   # Points are appended to this vector

# Calling the Function "Position Data"
cv2.imshow('Distorted Image', Image_copy)                                     # Displays Image Window
cv2.setMouseCallback('Distorted Image', Position_Data)
cv2.waitKey(0)                                                                # Added so that the Window will stay open indefinitely or until 4 points

# Arranging Points Counterclockwise (With Point 1 near Origin)
s = np.sum(points, axis=1)
pt_1 = points[np.argmin(s)]                                                   # Lowest Sum (Closest to Origin)
pt_3 = points[np.argmax(s)]                                                   # Largest Sum (Farthest to Origin)

diff = np.diff(points, axis=1)
pt_2 = points[np.argmax(diff)]                                                # Bottom Left Point
pt_4 = points[np.argmin(diff)]                                                # Up Right Point

# Measurements of Length and Width of Object
width_14 = np.sqrt(((pt_1[0] - pt_4[0])**2)+((pt_1[1] - pt_4[1])**2))
width_23 = np.sqrt(((pt_2[0] - pt_3[0])**2)+((pt_2[1] - pt_3[1])**2))
width = np.minimum(int(width_14),int(width_23))                               # Minimum Width
height_12 = np.sqrt(((pt_1[0] - pt_2[0])**2)+((pt_1[1] - pt_2[1])**2))
height_34 = np.sqrt(((pt_3[0] - pt_4[0])**2)+((pt_3[1] - pt_4[1])**2))
height = np.minimum(int(height_12),int(height_34))                            # Minimum Height

# Points in Undistorted Image
pt_1p = [0,0]
pt_2p = [0, height - 1]
pt_3p = [width - 1, height - 1]
pt_4p = [width - 1, 0]

# Linear Equations in Matrix Form
# Work in Progress (Would work better with a for loop)
A_1 = np.array([[-(pt_1p[0]),-(pt_1p[1]),-1,0,0,0,((pt_1p[0])*(pt_1[0])),((pt_1p[1])*(pt_1[0])),(pt_1[0])],[0,0,0,-(pt_1p[0]),-(pt_1p[1]),-1,((pt_1p[0])*(pt_1[1])),((pt_1p[1])*(pt_1[1])),(pt_1[1])]])
A_2 = np.array([[-(pt_2p[0]),-(pt_2p[1]),-1,0,0,0,((pt_2p[0])*(pt_2[0])),((pt_2p[1])*(pt_2[0])),(pt_2[0])],[0,0,0,-(pt_2p[0]),-(pt_2p[1]),-1,((pt_2p[0])*(pt_2[1])),((pt_2p[1])*(pt_2[1])),(pt_2[1])]])
A_3 = np.array([[-(pt_3p[0]),-(pt_3p[1]),-1,0,0,0,((pt_3p[0])*(pt_3[0])),((pt_3p[1])*(pt_3[0])),(pt_3[0])],[0,0,0,-(pt_3p[0]),-(pt_3p[1]),-1,((pt_3p[0])*(pt_3[1])),((pt_3p[1])*(pt_3[1])),(pt_3[1])]])
A_4 = np.array([[-(pt_4p[0]),-(pt_4p[1]),-1,0,0,0,((pt_4p[0])*(pt_4[0])),((pt_4p[1])*(pt_4[0])),(pt_4[0])],[0,0,0,-(pt_4p[0]),-(pt_4p[1]),-1,((pt_4p[0])*(pt_4[1])),((pt_4p[1])*(pt_4[1])),(pt_4[1])]])
A = np.vstack((A_1,A_2,A_3,A_4))

# SVD Decomposition of A-Array
# Unsure if this is allowed
U, s, VT = np.linalg.svd(A)

# Storing Smallest Eigenvalue and its Index
# Still not sure if this is needed, smallest value seems already at the rightmost
# Why only 8 elements?
min_pos = np.where(s == np.amin(s))

# Storing Eigenvector Column of Smallest Eigenvalue
V = np.transpose(VT)
V_h = V[:,min_pos[0]]

# Reshaping Array to a 3x3 Homography Matrix
H = V_h.reshape(3,3)
print (H)

# Notes: SVD, not sure because s is automatically sorted.
# Gonna make a V2 that will automatically just get the last column of V.
